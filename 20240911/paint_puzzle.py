import numpy as np
import matplotlib
import matplotlib.pyplot as plt

# ################################################################
# ################################################################
# 定数を定義する
# ################################################################
# ################################################################
MAZE_INIT = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 7, 0, 0, 9, 9, 0, 9, 9],
    [9, 0, 9, 9, 0, 0, 0, 0, 9],
    [9, 0, 0, 0, 0, 9, 9, 9, 9],
    [9, 9, 0, 9, 0, 9, 0, 8, 9],
    [9, 0, 0, 9, 0, 0, 0, 9, 9],
    [9, 0, 9, 0, 0, 9, 0, 0, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9]
]

STEPS = [
    (1, 1),     (2, 1),     (3, 1),     (3, 2),     (4, 2),     (5, 2),
    (5, 1),     (6, 1),     (5, 1),     (5, 2),     (4, 2),     (3, 2),
    (3, 3),     (3, 4),     (4, 4),     (5, 4),     (6, 4),     (6, 3),
    (6, 4),     (5, 4),     (5, 5),     (5, 6),     (6, 6),     (6, 7),
    (6, 6),     (5, 6),     (4, 6),     (4, 7) ]


VALUE_CURRENT_STEP  = 3
VALUE_PREVIOUS_STEP = 5

# ################################################################
# ################################################################
# 処理の本体はここから
# ################################################################
# ################################################################
fig, ax = plt.subplots()

# ################################
# 迷路のデータを読み込む（まだ一歩も進んでいない状態）
# ################################
# 注意: 必ずしも pcolormesh() である必要はないはず。
#       もっと軽量のライブラリ（メソッド）でも良いはず。
heatmap = ax.pcolormesh(MAZE_INIT,
                        # vmin=0, # 明記しなければ、読み込まれたデータの最小値が使われる。
                        # vmax=9, # 明記しなければ、読み込まれたデータの最小値が使われる。
                        cmap="jet" # 配色のパターン（お好みで）
                        )

# ################################################################
# グラフの設定
# ################################################################

# ################################
# 格子を表示することで迷路っぽさを表現する
# ################################
ax.set_xticks(np.arange(len(MAZE_INIT[0])), minor=False)
ax.set_yticks(np.arange(len(MAZE_INIT   )), minor=False)

# ################################
# 軸の数字や目盛りは表示しない
# ################################
ax.tick_params(labelbottom=False, labelleft=False, labelright=False, labeltop=False)
ax.tick_params(bottom=False, left=False, right=False, top=False)

# ################################################################
# パラパラ漫画の素となる連番画像の生成
# ################################################################
maze = MAZE_INIT

for idx, step in enumerate(STEPS):
    # ################################
    # 探索の先端の色を変える。
    # ただし、スタート地点の色は変えない。
    # ################################
    if idx != 0:
        maze[step[0]][step[1]] = VALUE_CURRENT_STEP

    # ################################
    # データの読み込み
    # ################################
    # 注意: 何やら deprecated の旨の警告が出るかもしれない。
    # MatplotlibDeprecationWarning: Auto-removal of grids by pcolor() and pcolormesh() is
    # deprecated since 3.5 and will be removed two minor releases later; please call grid(False) first.
    heatmap = ax.pcolormesh(maze,
                            # vmin=0,
                            # vmax=9,
                            cmap="jet" # 配色のパターン
                            )

    # ################################
    # 格子の描画
    # ################################
    plt.grid()

    # ################################
    # 画像ファイルの生成
    # ################################
    # 注意: images ディレクトリが存在しないとエラーになります。
    # pythonプログラムからも作れるはずですが、
    # 今は横着して、あらかじめ手動で作っておきました。
    plt.savefig(f'./images/{idx:02}.png')

    # ################################
    # ループの次の回に向けての準備
    # 探索の先端とそれ以前の経路を塗り分ける。
    # ただし、スタート地点の色は変えない。
    # ################################
    if idx != 0:
        maze[step[0]][step[1]] = VALUE_PREVIOUS_STEP
# ################################################################
# ################################################################
# プログラムはここまで
# ################################################################
# ################################################################

# ================================================================
# 連番の画像を出力した後のパラパラ漫画の作り方
# ================================================================
# 1. imagemagick をインストールする。
# 2. images ディレクトリに移動する。
#     -$cd ./images/
# 3. 以下のコマンドを実行する。
#     -$convert -delay 25 *.png steps.gif
