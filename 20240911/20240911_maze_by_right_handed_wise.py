# Hi-lock: (("右手の壁沿いに直進のまま" (0 (quote 9-my-face) prepend)))
# Hi-lock: (("右手が壁から離れる --> 右手側に折れる" (0 (quote 8-my-face) prepend)))
# Hi-lock: (("trial_count" (0 (quote 11-my-face) prepend)))
# Hi-lock: (("進んでみた値" (0 (quote 7-my-face) prepend)))
# Hi-lock: (("進んでみる座標" (0 (quote 6-my-face) prepend)))
# Hi-lock: (("進んでみる方向" (0 (quote 5-my-face) prepend)))
# Hi-lock: (("右手側の値" (0 (quote 4-my-face) prepend)))
# Hi-lock: (("右手側の位置" (0 (quote 3-my-face) prepend)))
# Hi-lock: (("検証方向" (0 (quote 2-my-face) prepend)))
# Hi-lock: (("現在位置" (0 (quote 1-my-face) prepend)))

# ################################################################
# ################################################################
# インポート
# ################################################################
# ################################################################
import random
from samples.part2_source_code import maze2
MAZE = maze2.MAZE

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 迷路のデータに関する注意
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 迷路のデータを得るために、以下のサンプルコードをダウンロードし、解凍し、読み込んでいます。
# - 翔泳社のページ
#     - https://www.shoeisha.co.jp/book/detail/9784798163826
# - zipファイルへの直URL
#     - 注意: 下記の直URLは2024年09月10日時点のものであり、変わる可能性があります。
#             また、攻撃者によってURLのリンク先を危険なものに
#             書き換えられてしまうかもしれません。
#             上記の翔泳社のページからリンクを辿るのが安全です。
#     - https://www.shoeisha.com/down/book/9784798163826/noutore_puzzle_data.zip?v2
# もしサンプルコードの入手が困難でしたら、
# 上記の「from ……」と「MAZE = maze2.MAZE ……」からの２行をコメントアウト（無効に）し、
# その代わりに下記の「MAZE = [ ……」 のコードを有効にしてください。
# MAZE = [
#     [9, 9, 9, 9, 9, 9, 9, 9, 9],
#     [9, 1, 0, 0, 9, 9, 0, 9, 9],
#     [9, 0, 9, 9, 0, 0, 0, 0, 9],
#     [9, 0, 0, 0, 0, 9, 9, 9, 9],
#     [9, 9, 0, 9, 0, 9, 0, 2, 9],
#     [9, 0, 0, 9, 0, 0, 0, 9, 9],
#     [9, 0, 9, 0, 0, 9, 0, 0, 9],
#     [9, 9, 9, 9, 9, 9, 9, 9, 9]
# ]
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# ################################################################
# ################################################################
# 定数
# ################################################################
# ################################################################


# ################
# マスの値
# ################
VALUE_GOAL  = 2 #ゴール地点の値
VALUE_WALL  = 9 #壁の値
VALUE_EMPTY = 0 #進めるマスの値

# ################
# 進行方向（の候補）
# 注意:
#     座標系は左手系
# ################
DIRECTIONS = [
    [ 1,  0, "下"],
    [ 0, -1, "左"],
    [-1,  0, "上"],
    [ 0,  1, "右"],
    ]

# ################
# 最大試行回数
# ################
MAX_TRIAL_COUNT = 1200

# ################################################################
# ################################################################
# 関数
# ################################################################
# ################################################################

# ================================================================
# 迷路を表示する
# ================================================================
def print_maze(maze):
    for row in maze:
        print(row)

# ================================================================
# 右手法に従って歩き回る
# ================================================================
def walk_around_right_handed_wise(x, y):
    trial_count = 0
    trace = [(x, y)]

    index = 0
    while MAX_TRIAL_COUNT > trial_count:
        trial_count += 1

        # ################################
        # 進行方向を決める
        # - 右手が壁から離れる --> 右手側に折れる
        # - 上記以外           --> 右手の壁沿いに直進のまま
        # ################################
        right_index = (index + 1)%4
        right_x     = x + DIRECTIONS[right_index][0]
        right_y     = y + DIRECTIONS[right_index][1]
        right_value = MAZE[right_x][right_y]
        print(f'{trial_count=:04}/1. 現在位置({x=}, {y=}), 検証方向({DIRECTIONS[right_index][2]}: {DIRECTIONS[right_index][0]}, {DIRECTIONS[right_index][1]}), 右手側の位置({right_x=}, {right_y=}), 右手側の値{right_value=}')
        if right_value != VALUE_WALL:
            print(f"{trial_count=:04}/2-A. 右手が壁から離れる --> 右手側に折れる")
            index = right_index
        else:
            print(f"{trial_count=:04}/2-B. 右手の壁沿いに直進のまま")

        # ################################
        # 決めた方向に進めれば進む
        # - もし進もうとした先が壁ならば、左手側に折れるよう、進行方向だけ変える。
        # ################################
        next_x     = x + DIRECTIONS[index][0]
        next_y     = y + DIRECTIONS[index][1]
        next_value = MAZE[next_x][next_y]
        # ≪trace log≫を使う・【f文字列】を使う
        print(f"{trial_count=:04}/3. 現在位置=({x}, {y}), 進んでみる方向({DIRECTIONS[index][2]}, {DIRECTIONS[index][0]}, {DIRECTIONS[index][1]}), 進んでみる座標=({next_x}, {next_y}), 進んでみた値={next_value}")

        # 無限ループにせず、最大試行回数 MAX_TRIAL_COUNT によりwhileを打ち切るので、
        # ゴールに到達したかどうかを評価する必要がある。
        if   next_value == VALUE_GOAL:
            x = next_x
            y = next_y
            trace.append((x, y))
            print(f"{trial_count=:04}/4. !!!!!!!!!!!!!!!! yahoo !!!!!!!!!!!!!!!!")
            break
        elif next_value == VALUE_WALL:
            print(f"{trial_count=:04}/4-A. 進もうとした先が壁 {VALUE_WALL=} だったので、左手側に折れるよう、次に進むべき方向だけ変える。")
            index = (index - 1)%4
        else:
            x = next_x
            y = next_y
            trace.append((x, y))
            print(f"{trial_count=:04}/4-B. 一歩進める to ({x}, {y})")

    return trial_count, trace

# ################################################################
# ################################################################
# エントリーポイント
# ################################################################
# ################################################################
if __name__ == '__main__':
    print_maze(MAZE)
    trial_count, trace = walk_around_right_handed_wise(1,1)
    print(trial_count)
    print(trace)
